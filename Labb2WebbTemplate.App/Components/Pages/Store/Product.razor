@page "/Store/Product/{ProductId}"

@using Labb2WebbTemplate.Shared.Dtos.ProductDtos
@using Labb2WebbTemplate.App.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Labb2WebbTemplate.Api.Endpoints.Orders
@using Labb2WebbTemplate.App.Models

@inject ProductService ProductService
@inject IJSRuntime JsRuntime
@inject CartService CartService

@if (Prod is null)
{
    <p>No product was found</p>
    return;
}
<MudPaper Class="pa-5">
    <MudText Typo="Typo.h4">@Prod.Name</MudText>
    
    <MudText> @Prod.Price$</MudText>

    
    <MudImage Height="300"
        Src="@(
                   Prod.HasImage 
                       ? $"http://localhost:5106/product/image/{Prod.Id}" 
                       : "Images/no-image.png")" />
    
    <MudText Typo="Typo.body1">@Prod.Description</MudText>
    
    <div class="d-flex">
        <MudIcon Icon="@Icons.Material.Filled.Circle"  Color="@StatusColor" Size="Size.Small" />
        <MudText>@ProductStatus</MudText>
    </div>
    
    <MudButton 
        Variant="Variant.Filled" 
        Disabled="!_isDisabled" 
        Color="Color.Info" 
        @onclick="()=> CartService.AddToCart(Prod)">ADD TO CART</MudButton>

</MudPaper>

@code {

    private bool _isDisabled;
    
    [Parameter] 
    public string ProductId { get; set; } = string.Empty;

    public ProductResponse? Prod { get; set; }

    public string ProductStatus { get; set; } = string.Empty;

    public Color StatusColor { get; set; } = Color.Default;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
            
        }

        if (!int.TryParse(ProductId, out var id))
        {
            return;
        }

        Prod = await ProductService.GetProductById(id);
        

        if (Prod is { IsDiscontinued: true })
        {
            StatusColor = Color.Error;
            ProductStatus = "Product is discontinued";
        }
        else if (Prod is { Stock: <= 0 })
        {
            StatusColor = Color.Warning;
            ProductStatus = "Product is not in stock";
        }
        else
        {
            StatusColor = Color.Success;
            if (Prod != null) ProductStatus = $"Stock: {Prod.Stock}";
            _isDisabled = true;
        }
        
        StateHasChanged();


    }


    

}